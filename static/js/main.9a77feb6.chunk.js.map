{"version":3,"sources":["TodoItem.js","TodoList.js","serviceWorker.js","index.js"],"names":["TodoItem","props","handleClick","bind","this","deleteItem","index","nextProps","nextState","content","console","log","onClick","Component","TodoList","state","inputValue","list","handleInputChange","handleBtnClick","handleItemDelete","e","value","target","setState","prevState","splice","map","item","key","htmlFor","id","onChange","getTodoItem","axios","get","then","alert","catch","res","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"4PAgCeA,E,kDA7BX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IAEDC,YAAY,EAAKA,YAAYC,KAAjB,gBAHF,E,0DAMJ,IAAD,EACoBC,KAAKH,OACnCI,EAFU,EACFA,YADE,EACUC,S,4CAIFC,EAAWC,GAC7B,OAAGD,EAAUE,UAAYL,KAAKH,MAAMQ,U,+BAOpCC,QAAQC,IAAK,gBADR,IAEGF,EAAYL,KAAKH,MAAjBQ,QACR,OACA,yBAAKG,QAASR,KAAKF,aACbO,O,GAxBSI,a,iBCuFRC,E,kDAnFb,WAAYb,GAAQ,IAAD,8BACjB,cAAMA,IACDc,MAAQ,CACXC,WAAY,GACZC,KAAM,IAER,EAAKC,kBAAkB,EAAKA,kBAAkBf,KAAvB,gBACvB,EAAKgB,eAAe,EAAKA,eAAehB,KAApB,gBACpB,EAAKiB,iBAAiB,EAAKA,iBAAiBjB,KAAtB,gBARL,E,8DAWDkB,GAChB,IAAMC,EAAQD,EAAEE,OAAOD,MACvBlB,KAAKoB,UAAS,iBAAO,CACnBR,WAAYM,Q,uCAQdlB,KAAKoB,UAAS,SAACC,GAAD,MAAgB,CAC5BR,KAAK,GAAD,mBAAMQ,EAAUR,MAAhB,CAAsBQ,EAAUT,aACpCA,WAAY,S,uCAQCV,GACfF,KAAKoB,UAAS,SAACC,GACb,IAAMR,EAAI,YAAOQ,EAAUR,MAE3B,OADAA,EAAKS,OAAOpB,EAAO,GACZ,CAACW,a,oCAWG,IAAD,OACZ,OAAOb,KAAKW,MAAME,KAAKU,KAAI,SAACC,EAAMtB,GAChC,OACH,yBAAKuB,IAAOvB,GACV,kBAAC,EAAD,CAAUG,QAASmB,EACjBtB,MAAOA,EACPD,WAAY,EAAKe,yB,+BASpB,OACE,kBAAC,WAAD,KACE,6BACE,2BAAOU,QAAQ,cAAf,4BACA,2BAAOC,GAAG,aAAaT,MAAOlB,KAAKW,MAAMC,WAAYgB,SAAU5B,KAAKc,oBACpE,4BAAQN,QAASR,KAAKe,gBAAtB,iBAEF,4BACGf,KAAK6B,kB,0CAOZC,IAAMC,IAAI,iBACPC,MAAK,WAAKC,MAAM,WAChBC,OAAM,SAACC,GAAOF,MAAM,gB,GAjFJxB,aCQH2B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBhB,MAAK,SAAAiB,GACJA,EAAaC,gBAEdhB,OAAM,SAAAiB,GACL7C,QAAQ6C,MAAMA,EAAMC,c","file":"static/js/main.9a77feb6.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass TodoItem extends Component {\n    constructor(props) {\n        super(props);\n\n        this.handleClick=this.handleClick.bind(this)\n    }\n\n    handleClick() {\n        const { deleteItem, index } = this.props\n        deleteItem(index);\n    }\n\n    shouldComponentUpdate(nextProps, nextState) {\n        if(nextProps.content !== this.props.content) {\n            return true;\n        }else {\n            return false;\n        }\n    }\n    render() {\n        console.log ('child-render')\n        const { content } = this.props\n        return(\n        <div onClick={this.handleClick}>\n            { content }\n        </div>\n        )  \n    }\n}\n\nexport default TodoItem","import React, {Component,Fragment} from 'react';\nimport TodoItem from './TodoItem';\nimport axios from 'axios';\n\nclass TodoList extends Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {\n      inputValue: '',\n      list: []\n    }\n    this.handleInputChange=this.handleInputChange.bind(this);\n    this.handleBtnClick=this.handleBtnClick.bind(this);\n    this.handleItemDelete=this.handleItemDelete.bind(this);\n  }\n\n  handleInputChange(e) {\n    const value = e.target.value\n    this.setState(() => ({\n      inputValue: value\n    }))\n    // this.setState({\n    //   inputValue: e.target.value\n    // })\n  }\n  \n  handleBtnClick() {\n    this.setState((prevState) => ({\n      list: [...prevState.list, prevState.inputValue],\n      inputValue: ''\n    }))\n    // this.setState({k\n    //   list: [...this.state.list, this.state.inputValue],\n    //   inputValue: ''\n    // })\n  }\n\n  handleItemDelete(index) {\n    this.setState((prevState) => {\n      const list = [...prevState.list];\n      list.splice(index, 1);\n      return {list}\n    })\n    //immutable\n    //state 不允许我们做任何的改变\n    // const list = [...this.state.list];\n    // list.splice(index,1);\n    // this.setState({\n    //   list: list\n    // })\n  }\n\n  getTodoItem() {\n    return this.state.list.map((item, index)=> {\n      return(\n   <div key = {index}>\n     <TodoItem content={item} \n       index={index} \n       deleteItem={this.handleItemDelete}/>\n       {/*(<li key={index} onClick={this.handleItemDelete(index)}\n       dangerouslySetInnerHTML={{__html: item}}></li>)*/}\n   </div>\n    )\n    })\n  }\n\n  render() {\n    return ( \n      <Fragment >\n        <div>\n          <label htmlFor=\"insertArea\">输入内容</label>\n          <input id=\"insertArea\" value={this.state.inputValue} onChange={this.handleInputChange} />\n          <button onClick={this.handleBtnClick}>提交</button>\n        </div>\n        <ul>\n          {this.getTodoItem()}\n        </ul>\n      </Fragment>\n    )\n  }\n\n  componentDidMount() {\n    axios.get('/api/todolist')\n      .then(()=>{alert('succ')})\n      .catch((res)=>{alert('error')})\n  }\n}\n\nexport default TodoList","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport TodoList from './TodoList';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <TodoList />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}